Javascript is dynamically typed hence we can know the type only after declaration
Types:
Number
Boolean
String
Undefined
Primitive(stored in stack) fixed memory size

Referneced types(Stored in heap) : variable memory size
Object
Number
Boolean
String
Null

NaN is of type Number
Infinity, pos infinity, neg infinity all are from number

From ES6 const is available so as to ensure that the type cannot be changed again

gets an erro assignment to constant variable this works with latest js Engine


FUNCTIONS:
if used as function fn_name :Function declaration
if var fn_name=function() :Function expression

function expression are not hoisted

hoisting

All declarations are located and identifiers are known by the compiler
ITs called such because it does the restructuring of variables

Only variable names are hoisted not the values
so
console.log(x);
var x=1000;
returns as undefined

function hoisting and variable hoisting
'use strict' to avoid hoisting

restricting parameters: check using typeof
if no parametres are passed undefined will be passed and hence gets executed
if nothing is returned, undefined will be returned

No block scoping in Javascript which allows variables to be accessed out of loops
let helps in this case, define variables as let and it'll ensure block scoping
hence its a standard use only after es2015/ES6

use--> for(let item in Object) to traverse the object list
literal style:name value pair 

Process is the global object in a JSEngine(like Nodejs Engine) and not available in browser environment
have to set value using a setter method to set hte value as global

Callback functions fn inside fn(as parameters)
Asynchronous
Event driven lang


for array comparision(in general referenced data types) custom equals function is to be used. == and === 
can be used only with primitive datatypes

every call back function should return something, if not returned, its treated as if "null" 
or "undefined" or "Nan" is returned which is treated as false

------ObjectOriented-----

ABstraction - makes sure that behaviour is consistent across all the implementations 
reduce coupling between components(classes)
interface proviodes an outerview of the class so that coupling is low
No abstraction,interface because js is dynamically typed

Every function has a special object called as prototype
prototype is a property of Object class
Onlh when object is created using function constructor we can directly access prototype
if created using literal style, use __proto__ to access the prototype property
Refer oo6.js

class is also a function so it can be assigned to a variable 

new doesn't copy the prototype and hence fails, while the object.create creates a prototype hence useful
var proj={seclvl:2};
var sproj=object.create(proj);
console.log(proj.__proto__isPrototypeof())
refere 007.js

use function expression as they cannot be hoisted
throw to raise an exception
Named function expression: Useful in debugging. Follow this! 
var fnName=function myfnName(parameters){}

context binding with "this"
default context is either process or window... if new is used, then a local object in context of the class of the object is created

iife/self invoked fn helps in modularity

let fn_name=(function(){

})(); function invoked here.. if not used then never invoked


Properties should be private and it should be done using getters and setters only!!

this.id=public
let id private